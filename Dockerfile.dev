# Define the base stage
FROM python:3.11 as base

# Set environment variables.
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PORT=8000

# Install system packages required by Wagtail and Django.
RUN apt-get update --yes --quiet && apt-get install --yes --quiet --no-install-recommends \
    build-essential \
    libpq-dev \
    libmariadb-dev \
    libjpeg62-turbo-dev \
    zlib1g-dev \
    libwebp-dev \
 && rm -rf /var/lib/apt/lists/*

# Install pipenv
RUN pip install poetry

# Copy Pipfile and Pipfile.lock
COPY pyproject.toml poetry.lock* ./

# Install the project requirements.
RUN poetry config virtualenvs.create false \
  && poetry install --no-interaction --no-ansi

# Use /app folder as a directory where the source code is stored.
WORKDIR /app

# Copy project
COPY . /app/

# Create user "wagtail"
RUN useradd -m wagtail

# Change the ownership of the /app directory to the user "wagtail"
RUN chown -R wagtail:wagtail /app

# Use user "wagtail" to run the build commands below and the server itself.
USER wagtail

FROM base as test

# Copy the source code of the project into the container.
COPY --chown=wagtail:wagtail . .

ENTRYPOINT [ "pytest" ]

# Define the server stage
FROM base as server

# Copy the source code of the project into the container.
COPY --chown=wagtail:wagtail . .

# Copy the entrypoint script into the Docker image
COPY --chown=wagtail:wagtail entrypoint.dev.sh /app/entrypoint.dev.sh

# Make the entrypoint script executable
RUN chmod +x /app/entrypoint.dev.sh

# Use the entrypoint script as the Docker entrypoint
ENTRYPOINT ["/app/entrypoint.dev.sh"]
